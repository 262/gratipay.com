import re
from aspen import json
from gittip.utils import get_participant

callback_pattern = re.compile(r'^[_A-Za-z0-9.]+$')

class BadPlatform(Exception): pass

# ==================== ^L
participant = get_participant(request, restrict=True)

if POST:
    out = []
    tips = json.loads(body.get('tips', '[]'))
    for tip in tips:
        one = {"username": tip['username'], "platform": "gittip"}
        try:
            if tip['platform'] != 'gittip':
                raise BadPlatform
            amount = participant.set_tip_to(tip['username'], tip['amount'])
        except Exception, exc:
            amount = "error"
            one['error'] = exc.__class__.__name__
        one['amount'] = str(amount[0])
        out.append(one)

else:
    tips, total, unclaimed_tips, unclaimed_total = \
                                           participant.get_giving_for_profile()

    out = []
    for tip in tips:
        if tip['amount'] == 0:
            continue
        out.append({ "username": tip['tippee']
                   , "platform": "gittip"
                   , "amount": str(tip['amount'])
                    })

response.body = out
