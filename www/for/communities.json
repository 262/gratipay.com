from aspen import Response
from gittip import db
from gittip.models import community

# =================== ^L

if POST:

    # name
    name = body['name']
    if community.name_pattern.match(name) is None:
        raise Response(400)

    # slug
    slug = community.slugize(name)

    # is_member
    is_member = body['is_member']
    if is_member not in ('true', 'false'):
        raise Response(400)
    is_member = is_member == 'true'

    username = user.username
    db.execute("""

        INSERT INTO communities
                    (ctime, name, slug, participant, is_member)
             VALUES ( COALESCE (( SELECT ctime
                                    FROM communities
                                   WHERE (participant=%s AND slug=%s)
                                   LIMIT 1
                                  ), CURRENT_TIMESTAMP)
                    , %s, %s, %s, %s
                     )
          RETURNING (SELECT count(*) = 0 FROM communities WHERE participant=%s)
                 AS first_time_community

    """, (username, slug, name, slug, username, is_member, username))

elif GET:
    response.headers["Access-Control-Allow-Origin"] = "*"

communities = community.get_list_for(user)

response.body = { "threshold": community.NMEMBERS_THRESHOLD
                , "communities": communities
                 }
