from aspen import Response
from gittip.models.community import name_pattern, slugize, Community

[----------------------]

if not GET:
    # Method not allowed
    raise Response(405)

_slug = path['slug']
if name_pattern.match(_slug) is None:
    raise Response(404)
slug = slugize(_slug)
#if slug != _slug:
#    request.redirect('../' + slug + '/')

community = Community.from_slug(slug)

if not community:
    # Community not found
    raise Response(404)

try:
    limit = min(int(qs.get('limit', 10)), 100)
    offset = int(qs.get('offset', 0))
except ValueError:
    raise Response(400)


community_members = website.db.all("""
    SELECT participants.*::participants FROM participants
    WHERE username IN
    (SELECT participant FROM communities
    WHERE name=%s
    ORDER BY claimed_time
    LIMIT %s
    OFFSET %s);
""", (community.name, limit, offset))


response.body = {
    "name": community.name,
    "slug": community.slug,
    "members": [p.to_dict() for p in community_members]
}
