"""Associate a OpenStreetMap account with a Gittip account.

First we do the OAuth dance with OpenStreetMap. Once we've authenticated the user
against OpenStreetMap, we record them in our elsewhere table. This table contains
information for OpenStreetMap users whether or not they are explicit participants in
the Gittip community.

"""
from urlparse import parse_qs

import requests
from requests_oauthlib import OAuth1
from aspen import log, Response
from aspen import resources
from gittip.elsewhere import ACTIONS, openstreetmap
from gittip.models._mixin_elsewhere import NeedConfirmation
import xml.etree.ElementTree as ET
\
[-----------------------------]

if 'denied' in qs:
    request.redirect('/')


token = qs['oauth_token']
try:
    secret, action, then = website.oauth_cache.pop(token)
    then = then.decode('base64')
except KeyError:
    request.redirect("/about/me.html")

oauth_hook = OAuth1( website.openstreetmap_consumer_key
                   , website.openstreetmap_consumer_secret
                   , token
                   , secret
                    )
response = requests.post( "%s/oauth/access_token" % website.openstreetmap_api
                        , data={"oauth_verifier": qs['oauth_verifier']}
                        , auth=oauth_hook
                         )
assert response.status_code == 200, response.status_code

reply = parse_qs(response.text)
token = reply['oauth_token'][0]
secret = reply['oauth_token_secret'][0]

oauth_hook = OAuth1( website.openstreetmap_consumer_key
                   , website.openstreetmap_consumer_secret
                   , token
                   , secret
                    )
response = requests.get( "%s/api/0.6/user/details" % website.openstreetmap_api
                       , auth=oauth_hook
                        )
assert response.status_code == 200, response.status_code

osm_et = ET.fromstring(response.text)
user_info = {}
user_info['osm_id'] = unicode(osm_et.find('user').get('id'))
user_info['username'] = unicode(osm_et.find('user').get('display_name'))
user_info['img_src'] = unicode(osm_et.find('user').find('img').get('href'))
del osm_et

# Load OpenStreetMap user info.

if action not in ACTIONS:
    raise Response(400)

# Make sure we have a OpenStreetMap username.
if user_info['username'] is None:
    log(u"We got a user_info from OpenStreetMap with no username [%s, %s]"
        % (action, then))
    raise Response(400)
user_info['html_url'] = website.openstreetmap_api + "/user/" + user_info['username']

# Do something.
log(u"%s wants to %s" % (user_info['username'], action))

account = openstreetmap.OpenStreetMapAccount(website.db, user_info['osm_id'], user_info)

if action == 'opt-in':      # opt in
    # set 'user' to give them a session :/
    user, newly_claimed = account.opt_in(user_info['username'])
    del account
elif action == 'connect':   # connect
    if user.ANON:
        raise Response(404)
    try:
        user.participant.take_over(account)
    except NeedConfirmation, obstacles:

        # XXX Eep! Internal redirect! Really?!
        request.internally_redirected_from = request.fs
        request.fs = website.www_root + '/on/confirm.html.spt'
        request.resource = resources.get(request)

        raise request.resource.respond(request)
    else:
        del account
else:                       # lock or unlock
    if then != user_info['username']:

        # The user could spoof `then' to match their username, but the most
        # they can do is lock/unlock their own OpenStreetMap account in a convoluted
        # way.

        then = u'/on/openstreetmap/%s/lock-fail.html' % then

    else:

        # Associate the OpenStreetMap username with a randomly-named, unclaimed
        # Gittip participant.

        assert account.participant != user_info['username'], user_info['username'] # sanity check
        account.set_is_locked(action == 'lock')
        del account

if then == u'':
    then = u'/%s/' % user.participant.username
if not then.startswith(u'/'):
    # Interpret it as a OpenStreetMap username.
    then = u'/on/openstreetmap/%s/' % then
request.redirect(then)

[-----------------------------] text/plain
