"""Associate a Twitter account with a Gittip account.

First we do the OAuth dance with Twitter. Once we've authenticated the user
against Twitter, we record them in our elsewhere table. This table contains
information for Twitter users whether or not they are explicit participants in
the Gittip community.

"""
import requests
from oauth_hook import OAuthHook
from aspen import log, Response, json
from gittip import db
from gittip.elsewhere import change_participant_id, twitter, set_as_claimed
from gittip.authentication import User
from urlparse import parse_qs
from psycopg2 import IntegrityError

# ========================== ^L

if 'denied' in qs:
    request.redirect('/')


token = qs['oauth_token']
secret, action, then = website.oauth_cache.pop(token)


oauth_hook = OAuthHook(token, secret, header_auth=True)
response = requests.post( "https://api.twitter.com/oauth/access_token"
                        , data={"oauth_verifier": qs['oauth_verifier']}
                        , hooks={'pre_request': oauth_hook}
                         )
assert response.status_code == 200

reply = parse_qs(response.text)
token = reply['oauth_token'][0]
secret = reply['oauth_token_secret'][0]
user_id = reply['user_id'][0]


oauth_hook = OAuthHook(token, secret, header_auth=True)
response = requests.get( "https://api.twitter.com/1/users/show.json?user_id=%s" % user_id
                       , hooks={'pre_request': oauth_hook}
                        )
user_info = json.loads(response.text)
assert response.status_code == 200


# Load Twitter user info.

if action not in [u'opt-in', u'lock', u'unlock']:
    raise Response(400)

# Make sure we have a Twitter screen_name.
screen_name = user_info.get('screen_name')
if screen_name is None:
    log(u"We got a user_info from Twitter with no screen_name [%s, %s]"
        % (action, then))
    raise Response(400)
user_info['html_url'] = "https://twitter.com/" + screen_name

# Do something.
log(u"%s wants to %s" % (screen_name, action))
if action == 'opt-in':      # opt in
    participant_id, is_claimed, is_locked, balance = twitter.upsert(user_info)
    if not is_claimed:
        try:
            change_participant_id(website, participant_id, screen_name)
            participant_id = screen_name
        except (Response, IntegrityError):
            pass
        set_as_claimed(participant_id)
    user = User.from_id(participant_id)  # give them a session
else:                       # lock or unlock
    if then != screen_name:

        # The user could spoof `then' to match their screen_name, but the most
        # they can do is lock/unlock their own Twitter account in a convoluted
        # way.

        then = u'/on/twitter/%s/lock-fail.html' % then

    else:

        # Associate the Twitter screen_name with a randomly-named, unclaimed
        # Gittip participant.

        participant_id, is_claimed, is_locked, balance \
                                                    = twitter.upsert(user_info)
        assert participant_id != screen_name, screen_name # sanity check

        db.execute( "UPDATE elsewhere "
                    "SET is_locked=%s "
                    "WHERE participant_id=%s"
                  , (action == 'lock', participant_id)
                   )

if then == u'':
    then = u'/%s/' % participant_id
if not then.startswith(u'/'):
    # Interpret it as a Twitter screen_name.
    then = u'/on/twitter/%s/' % then
request.redirect(then)

# ========================== ^L text/plain
