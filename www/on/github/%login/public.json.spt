"""GitHub user page on Gittip.
"""
import re
from urllib import urlencode

from aspen import json, Response
from gittip.elsewhere import github


callback_pattern = re.compile(r'^[_A-Za-z0-9.]+$')


def stringify_qs(qs, prefix='?'):
    # XXX Upstream to Aspen
    tupled = []
    for k, vals in qs.items():
        for v in vals:
            tupled.append((k, v))
    return prefix + urlencode(tupled) if tupled else ""

[--------------------------------]

response.body = None
try:
    user_info = github.get_user_info(website.db, path['login'])
except Response, res:
    if res.code == 404:
        pass
    else:
        raise
else:
    usertype = user_info.get("type", "unknown type of account").lower()
    if usertype == "user":
        account = github.GitHubAccount(website.db, user_info['id'], user_info)
        if account.is_claimed:
            next_url = '/%s/public.json' % account.participant
            next_url += stringify_qs(qs)
            request.redirect(next_url)

# CORS - see https://github.com/gittip/aspen-python/issues/138
response.headers["Access-Control-Allow-Origin"] = "*"

# JSONP - see https://github.com/gittip/aspen-python/issues/138
callback = qs.get('callback')
if callback is not None:
    if callback_pattern.match(callback) is None:
        response.code = 400
        response.body = {"error": "bad callback"}
    else:
        response.body = "%s(%s)" % (callback, json.dumps(response.body))
        response.headers['Content-Type'] = 'application/javascript'
