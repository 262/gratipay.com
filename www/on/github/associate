"""Associate a GitHub account with a Gittip account.

First we do the OAuth dance with GitHub. Once we've authenticated the user
against GitHub, we record them in our elsewhere table. This table contains
information for GitHub users whether or not they are explicit participants in
the Gittip community.

"""
from aspen import log, Response
from gittip.elsewhere import github

# ========================== ^L

# Load GitHub user info.
user_info = github.oauth_dance(website, qs)

# Determine what we're supposed to do.
data = qs['data'].decode('base64').decode('UTF-8')
action, then = data.split(',', 1)
if action not in [u'opt-in', u'lock', u'unlock']:
    raise Response(400)

# Make sure we have a GitHub login.
login = user_info.get('login')
if login is None:
    log(u"We got a user_info from GitHub with no login [%s, %s]"
        % (action, then))
    raise Response(400)

# Do something.
log(u"%s wants to %s" % (login, action))

account = github.GitHubAccount(user_info['id'])

if action == 'opt-in':      # opt in
    user = account.opt_in()  # setting 'user' gives them a session
    participant_id = user.id
else:                       # lock or unlock
    if then != login:

        # The user could spoof `then' to match their login, but the most they
        # can do is lock/unlock their own GitHub account in a convoluted way.

        then = u'/on/github/%s/lock-fail.html' % then

    else:

        # Associate the GitHub login with a randomly-named, unclaimed Gittip
        # participant.

        participant_id, is_claimed, is_locked, balance \
                                                    = account.upsert(user_info)
        assert participant_id != login, login # sanity check

        account.set_is_locked(action == 'lock')

if then == u'':
    then = u'/%s/' % participant_id
if not then.startswith(u'/'):
    # Interpret it as a GitHub login.
    then = u'/on/github/%s/' % then
request.redirect(then)

# ========================== ^L text/plain
