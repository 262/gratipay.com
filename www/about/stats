import datetime
import locale
from aspen import json
from gittip import db, age, AMOUNTS, OLD_AMOUNTS

CARDINALS = ["zero", "one", "two", "three", "four", "five", "six", "seven",
             "eight", "nine"]
WEDNESDAY = 2
THURSDAY = 3
FRIDAY = 4
SATURDAY = 5

def commaize(number, places=0):
    return locale.format("%%.%df" % places, number, grouping=True)

# ===================================================== ^L

yesterday = datetime.datetime.utcnow() - datetime.timedelta(hours=24)
escrow = db.fetchone("SELECT sum(balance) FROM participants")['sum']
escrow = 0 if escrow is None else escrow
nach = db.fetchone("SELECT count(*) AS n FROM participants WHERE last_ach_result = ''")['n']
nach = 0 if nach is None else nach
if nach < 10:
    nach = CARDINALS[nach].title()
else:
    nach = commaize(nach)
payday = db.fetchone( "SELECT ts_start, ts_end FROM paydays WHERE ts_start > %s"
                    , (yesterday,)
                     )
npeople = db.fetchone("SELECT count(*) AS n FROM participants WHERE claimed_time IS NOT NULL")['n']
ncc = db.fetchone("SELECT count(*) AS n FROM participants WHERE last_bill_result = ''")['n']
ncc = 0 if ncc is None else ncc
pcc = "%5.1f" % ((ncc * 100.0) / npeople) if npeople > 0 else 0.0
statements = db.fetchall("SELECT id, statement FROM participants WHERE statement != '' ORDER BY id")
statements = [] if statements is None else list(statements)
transfer_volume = db.fetchone("SELECT transfer_volume AS v FROM paydays ORDER BY ts_end DESC LIMIT 1")
transfer_volume = 0 if transfer_volume is None else transfer_volume['v']
tip_amounts = db.fetchone("""
        SELECT avg(amount), sum(amount)
         FROM (    SELECT DISTINCT ON (tipper, tippee) amount
                     FROM tips
                     JOIN participants p ON p.id = tipper
                     JOIN participants p2 ON p2.id = tippee
                    WHERE p.last_bill_result = ''
                      AND p2.claimed_time IS NOT NULL
                 ORDER BY tipper, tippee, mtime DESC
               ) AS foo;
""")
if tip_amounts is None:
    average_tip = 0
    total_backed_tips = 0
else:
    average_tip = tip_amounts['avg'] if tip_amounts['avg'] is not None else 0
    total_backed_tips = tip_amounts['sum'] if tip_amounts['sum'] is not None else 0

average_tippees = db.fetchone("""\
        SELECT round(avg(ntippees))
          FROM ( SELECT count(tippee) as NTIPPEES
                   FROM ( SELECT DISTINCT ON (tipper, tippee)
                                 tipper
                               , tippee
                               , amount
                            FROM tips
                            JOIN participants p ON p.id = tipper
                            JOIN participants p2 on p2.id = tippee
                           WHERE p.last_bill_result = ''
                             AND p2.claimed_time IS NOT NULL
                        GROUP BY tipper, tippee, mtime, amount
                        ORDER BY tipper, tippee, mtime DESC
                         ) AS foo WHERE amount > 0 GROUP BY tipper) AS bar
""")['round']
average_tippees = 0 if average_tippees is None else int(average_tippees)

word = "people"
if average_tippees == 1:
    word = "person"

if average_tippees < 10:
    number = CARDINALS[average_tippees]
else:
    number = str(average_tippees)

other_people = "%s other %s" % (number, word)

# Tip Distribution
_tip_distribution = list(db.fetchall("""

    SELECT amount, count(amount)
      FROM (SELECT DISTINCT ON (tipper, tippee)
                   amount
              FROM tips
              JOIN participants p ON p.id = tipper
              JOIN participants p2 on p2.id = tippee
             WHERE p.last_bill_result = ''
               AND p2.claimed_time IS NOT NULL
               AND amount > 0
          GROUP BY tipper, tippee, mtime, amount
          ORDER BY tipper, tippee, mtime DESC
                  ) AS foo
     WHERE amount > 0
  GROUP BY amount
  ORDER BY amount

"""))
old_tip_n = sum([row['count'] for row in _tip_distribution if row['amount'] in OLD_AMOUNTS])
new_tip_n = sum([row['count'] for row in _tip_distribution if row['amount'] in AMOUNTS])

all_amounts = OLD_AMOUNTS + AMOUNTS[1:]
tip_distribution = {a: (0, 0.0) for a in all_amounts}  # prime it
for row in _tip_distribution:
    tip_n = old_tip_n if row['amount'] in OLD_AMOUNTS else new_tip_n
    row['percentage'] = row['count'] * 1.0 / tip_n
    tip_distribution[row['amount']] = (row['count'], row['percentage'])


def part(s):
    s = s.splitlines()[0]
    if len(s) > 60:
        s = s[:57].rsplit(None, 1)[0] + " ..."
    return s


# Adapt wording to payday status.
# ===============================

last_thursday = "last Thursday"
this_thursday = "this Thursday"
punc = "."
future_processing_text = "is ready for"
now = datetime.datetime.utcnow()
if now.weekday() == WEDNESDAY:
    this_thursday = "tomorrow"
if now.weekday() == THURSDAY:
    if payday is None or payday['ts_end'] is None:
        # Payday hasn't started yet.
        this_thursday = "today"
    elif payday['ts_end'].year == 1970:
        # Payday is going on right now.
        future_processing_text = "is changing hands"
        this_thursday = "right now!"
        punc = ""
    else:
        # Payday is finished for today.
        last_thursday = "today"
        this_thursday = "next Thursday"
elif now.weekday() == FRIDAY:
    last_thursday = "yesterday"
    this_thursday = "next Thursday"
elif now.weekday() == SATURDAY:
    last_thursday = "this past Thursday"
    this_thursday = "this coming Thursday"


tip_distribution_json = {str(k): v for k,v in tip_distribution.items()}
names = ['ncc', 'pcc', 'statements', 'transfer_volume',
         'last_thursday', 'this_thursday', 'punc', 'other_people',
         'average_tip', 'average_tippees', 'total_backed_tips',
         'tip_distribution_json', 'old_tip_n', 'new_tip_n',
         'nach', 'escrow']

^L application/json
{{ json.dumps({name: globals()[name] for name in names}) }}
^L text/html

{% extends templates/base.html %}
{% block body %}
<style>
    .dollar-sign {
        padding: 0 2pt 0 24pt;
        text-align: right;
    }
    .amount {
        padding: 0 6pt 0 0;
        text-align: right;
    }
    .amount-change {
        padding: 6pt 0 6pt 24pt;
        text-align: left;
    }
    .count {
        text-align: left;
        white-space: nowrap;
    }
    .count SPAN.number {
        font-size: 8pt;
    }
    .count SPAN.bar {
        background: #B2A196;
        display: inline-block;
        margin-right: 3pt;
        height: 9pt;
        }
</style>

<p class="below-header"><a href="./">About</a></p>

<h2>Gittip is <b>{{ age() }}</b> old.</h2>

<h2><b>{{ commaize(npeople) }} people</b> have joined Gittip.</h2>

<p>Of those, {{ pcc }}% ({{ commaize(ncc) }}) have a working credit card on
file.{% if user.last_bill_result == '' %} You&rsquo;re one of them.
{% elif not user.ANON %} You&rsquo;re not one of them.</p><p><b><a
href="/credit-card.html" class="highlight">Click here to set up a credit
card</a></b>.{% end %}</p>

<h2><b>${{ commaize(escrow, 2) }}</b> is escrowed within Gittip.</h2>

<p>{{ nach }} people have connected a bank account</a> for withdrawals.
{% if user.last_ach_result == '' %}You&rsquo;re one of them.
{% elif not user.ANON %} You&rsquo;re not one of them.</p><p><b><a
href="/bank-account.html" class="highlight">Click here to connect a bank
account</a></b>.{% end %}</p>

<h2><b>${{ commaize(transfer_volume, 2) }}</b> changed hands
    <b>{{ last_thursday }}</b>.</h2>

<h2><b>${{ commaize(total_backed_tips, 2) }}</b>
    {{ future_processing_text }} <b>{{ this_thursday }}</b>{{ punc }}
    <span class="small"><a href="unclaimed.html">Unclaimed</a></span>
</h2>

<p>On average, people who tip, tip ${{ "%.2f" % average_tip }} each to
{{ other_people }}. Here&rsquo;s how tip amounts are distributed:</p>

<table id="tip-distribution">
    {% for amount in all_amounts %}
    <tr>
        <td class="dollar-sign">$</td>
        <td class="amount">{{ amount }}</td>
        <td class="count">
            <span class="bar" style="width: {{ tip_distribution[amount][1] * 300 }}pt"></span>
            {{ "%5.1f" % (tip_distribution[amount][1] * 100) }}%
            <span class="number">({{ tip_distribution[amount][0] }})</span>
        </td>
    </tr>
    {% if str(amount) == '0.25' %}
    <td class="amount-change help" colspan="3">
        <a href="https://github.com/whit537/www.gittip.com/issues/180"
           target="_blank">Read
        here</a> about raising the minimum.
    </td>
    {% end %}
    {% end %}
</table>



<h2><b>{{ len(statements) }}</b> people are <b>making the world better</b>.</h2>

<p>
{% for statement in statements %}
<b><a href="/{{ statement['id'] }}/">{{ escape(statement['id']) }}</a></b>
is {{ escape(part(statement['statement'])) }}</b><br />{% end %}
</p>

{% end %}
