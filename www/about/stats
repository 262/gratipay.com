import datetime
from aspen import json
from gittip import db, age

CARDINALS = ["zero", "one", "two", "three", "four", "five", "six", "seven", 
             "eight", "nine"]
THURSDAY = 3
FRIDAY = 4
SATURDAY = 5
SUNDAY = 6

# ===================================================== ^L

yesterday = datetime.datetime.utcnow() - datetime.timedelta(hours=24)
payday = db.fetchone( "SELECT ts_start, ts_end FROM paydays WHERE ts_start > %s"
                    , (yesterday,)
                     )
npeople = db.fetchone("SELECT count(*) AS n FROM participants WHERE claimed_time IS NOT NULL")['n']
ncc = db.fetchone("SELECT count(*) AS n FROM participants WHERE last_bill_result = ''")['n']
ncc = 0 if ncc is None else ncc
pcc = "%5.1f" % ((ncc * 100.0) / npeople)
statements = db.fetchall("SELECT id, statement FROM participants WHERE statement != '' ORDER BY id")
statements = [] if statements is None else list(statements)
amount = db.fetchone("SELECT transfer_volume AS v FROM paydays ORDER BY ts_end DESC LIMIT 1")['v']
amount = 0 if amount is None else amount
tip_amounts = db.fetchone("""
        SELECT avg(amount), sum(amount)
         FROM (    SELECT DISTINCT ON (tipper, tippee) amount
                     FROM tips
                     JOIN participants p ON p.id = tipper
                     JOIN participants p2 ON p2.id = tippee
                    WHERE p.last_bill_result = ''
                      AND p2.claimed_time IS NOT NULL
                 ORDER BY tipper, tippee, mtime DESC
               ) AS foo; 
""")
if tip_amounts is None:
    average_tip = 0
    total_backed_tips = 0
else:
    average_tip = tip_amounts['avg'] if tip_amounts['avg'] is not None else 0
    total_backed_tips = tip_amounts['sum']

average_tippees = db.fetchone("""\
        SELECT round(avg(ntippees))
          FROM ( SELECT count(tippee) as NTIPPEES 
                   FROM ( SELECT DISTINCT ON (tipper, tippee) 
                                 tipper
                               , tippee
                               , amount
                            FROM tips
                            JOIN participants p ON p.id = tipper
                            JOIN participants p2 on p2.id = tippee
                           WHERE p.last_bill_result = ''
                             AND p2.claimed_time IS NOT NULL
                        GROUP BY tipper, tippee, mtime, amount
                        ORDER BY tipper, tippee, mtime DESC
                         ) AS foo WHERE amount > 0 GROUP BY tipper) AS bar
""")['round']
average_tippees = 0 if average_tippees is None else int(average_tippees)

word = "people"
if average_tippees < 10:
    number = CARDINALS[average_tippees]
    if average_tippees == 1:
        word = "person" 
else:
    number = str(average_tippees)
other_people = "%s other %s" % (number, word)

tip_distribution = list(db.fetchall("""

    SELECT amount, count(amount) 
      FROM (SELECT DISTINCT ON (tipper, tippee) 
                   amount
              FROM tips
              JOIN participants p ON p.id = tipper
              JOIN participants p2 on p2.id = tippee
             WHERE p.last_bill_result = ''
               AND amount > 0
          GROUP BY tipper, tippee, mtime, amount
          ORDER BY tipper, tippee, mtime DESC
                  ) AS foo 
     WHERE amount > 0
  GROUP BY amount 
  ORDER BY amount

"""))
tip_n = sum([row['count'] for row in tip_distribution])
for row in tip_distribution:
    row['percentage'] = row['count'] * 1.0 / tip_n

def part(s):
    s = s.splitlines()[0]
    if len(s) > 60:
        s = s[:57].rsplit(None, 1)[0] + " ..."
    return s


# Adapt wording to payday status.
# ===============================

last_friday = "last Friday"
this_friday = "this Friday"
now = datetime.datetime.utcnow() 
if now.weekday() == THURSDAY:
    this_friday = "tomorrow"
if now.weekday() == FRIDAY:
    if payday is None or payday['ts_end'] is None:
        # Payday hasn't started yet or is going on right now.
        this_friday = "today"
    else:
        # Payday is finished for today.
        last_friday = "today"
        this_friday = "next Friday"
elif now.weekday() == SATURDAY:
    last_friday = "yesterday"
    this_friday = "next Friday"
elif now.weekday() == SUNDAY:
    last_friday = "this past Friday"
    this_friday = "this coming Friday"

names = ['ncc', 'pcc', 'statements', 'amount', 
         'last_friday', 'this_friday', 'other_people',
         'average_tip', 'average_tippees', 'total_backed_tips',
         'tip_distribution', 'tip_n']

^L application/json
{{ json.dumps({name: globals()[name] for name in names}) }}
^L text/html

{% extends templates/base.html %}
{% block body %}
<style>
    .dollar-sign {
        padding: 0 2pt 0 24pt;
        text-align: right;
    }
    .amount {
        padding: 0 6pt 0 0;
        text-align: right;
    }
    .count {
        text-align: left;
        white-space: nowrap;
    }
    .count SPAN.number {
        font-size: 8pt;
    }
    .count SPAN.bar {
        background: #B2A196;
        display: inline-block;
        margin-right: 3pt;
        height: 9pt;
    }
</style>

<p class="below-header"><a href="./">About</a></p>

<h2>Gittip is <b>{{ age() }}</b> old.</h2>

<h2><b>{{ npeople }} people</b> have joined Gittip.</h2>

<p>Of those, {{ pcc }}% ({{ ncc }}) have a working credit card on file.</p>


<h2><b>${{ amount }}</b> changed hands <b>{{ last_friday }}</b>.</h2>

<h2><b>${{ total_backed_tips }}</b> is ready for <b>{{ this_friday }}</b>.
    <span class="small"><a href="leaderboard.html">Leaderboard</a></span>
</h2>

<p>On average, people who tip tip ${{ "%.2f" % average_tip }} each to 
{{ other_people }}. Here&rsquo;s how tip amounts are distributed:</p>

<table id="tip-distribution">
    {% for row in tip_distribution %}
    <tr>
        <td class="dollar-sign">$</td>
        <td class="amount">{{ row['amount'] }}</td>
        <td class="count">
            <span class="bar" style="width: {{ row['percentage'] * 256 }}pt"></span>
            {{ "%5.1f" % (row['percentage'] * 100) }}% 
            <span class="number">({{ row['count'] }})</span>
        </td>
    </tr>
    {% end %}
</table>



<h2><b>{{ len(statements) }}</b> people are <b>making the world better</b>.</h2>

<p>
{% for statement in statements %}
<b><a href="/{{ statement['id'] }}/">{{ escape(statement['id']) }}</a></b> 
is {{ escape(part(statement['statement'])) }}</b><br />{% end %}
</p>

{% end %}
